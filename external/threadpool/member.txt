Regarding your question, yes, there's a way to pass member functions. Your approach doesn't work because the submit function is implemented in such way that the first argument is always the function and the following arguments are the parameters of the function. Probably I could override the submit function or something similar to make it easier...In the meantime, you can solve the issue using std::bind. The idea is basically to create a new function that is simply the function we want to call with the specific object from which we want to call it.

auto func = std::bind(&A::func_1, &objA);
pool.submit(func);

You could do exactly the same using lambda expressions,

pool.submit([&]() {objA.func1(); });

Hope this helps!

